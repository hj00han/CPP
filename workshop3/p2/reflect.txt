/***********************************************************************
Name : Hyunjoo Han
Email : hhan39@myseneca.ca
ID : 132749227
Date of completion : 10/02/2023
***********************************************************************/
In this workshop, I was introduced to defining a class type. The definition of a class always begins with the 'class' keyword followed by the name of the class. In C++, the class definition is a declaration and must always end with a semicolon (;). Classes define member functions and data members. These members are applied on a per-object basis, which is an instance of that class. There is no limit to the number of member functions and data members a class can have, and the data member name cannot be the same as the member function name. If the class does not specify an access specifier separately, 'private' is specified by default. In other words, 'private' applies to all members declared without specifying an access specifier.

Once a class is defined, I can create objects (instances) of that class. Instantiation involves allocating memory for an object and calling its constructor to initialize its state.

For example, in this workshop, I had to create a class called 'Train':
class Train {
		char* trainName;
		int noOfPassenger;
		int departureTime;

	public:
		void initialize();
		bool validTime(int value)const;
		bool validNoOfPassengers(int value)const;
		void set(const char* name);
		void set(int noOfPassengers, int departure);
		void set(const char* name, int noOfPassengers, int departure);
		void finalize();
		bool isInvalid()const;
		int noOfPassengers() const;
		const char* getName() const;
		int getDepartureTime() const;
		void display() const;
		bool load(int& unboarded);
		bool updateDepartureTime();
		bool transfer(const Train& train);
	};

To define this class, I first used the keyword 'class' and declared the name as 'Train'. In this class, data members' access is not specified; therefore, these are private variables by default. All the functions' accesses are specified as 'public'. For instantiation, I should use the class's name, which is 'Train', and an instance name. By doing this, each object will have its own set of attributes and can use the functions defined in the class. I didn't use 'this', but I could see it in 'Main.cpp'.

There are different types of member functions. One of them is a query function, designed to retrieve or query information about the state of an object. It's a function that provides a way to access the values of the object's data members (attributes) without directly exposing those attributes to external code. The keyword for this function is 'const'. All the member functions above with 'const' at the end are query functions. I can call them without arguments, and they will retrieve or display information. For example, 'getName()' will return the name of the train, and 'display()' will literally display the information, depending on how it is implemented. All the validation functions check if particular variables are valid but don't modify any of them, serving as query functions. 

In part 2, I called a query function to print the name of the train:

cout << "Train is full; " << unboarded << " passengers of " << transferFrom.getName() << " could not be boarded!" << endl;

In this code, instead of 'transferFrom.trainName', I decided to use a member function 'getName()' to pass the data to the output stream. On the other hand, member functions can also modify the state of an object by updating its data members. All the 'set' functions are examples. Finally, one more way that I had to use the member function is for deallocating dynamic memory. 'finalize()' is the member function that will release the dynamic memory so that I can call it by the time that I finish using the dynamic memory, which, in this workshop, is for the name.

In conclusion, this workshop provided a thorough exploration of class types in C++. The 'Train' class example illustrated key concepts such as instantiation, dynamic memory allocation, and member functions' dual roles in querying and modifying object states. Query functions, identified by the 'const' keyword, enable information retrieval without altering the object.The workshop gave me a good  start in using classes in C++, showing how they help make code neat and easy to understand. The example with the 'Train' class demonstrated these ideas in a straightforward and practical way, making object-oriented programming principles clear.